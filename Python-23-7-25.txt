1. Inheritance in Python
   Inheritance allows a class (child) to inherit features (methods and variables) from another class (parent).

Example: Single Inheritance

# Parent class
class Animal:
    def sound(self):
        print("Animal makes a sound")

# Child class inherits from Animal
class Dog(Animal):
    def bark(self):
        print("Dog barks")

# Create object
d = Dog()
d.sound() 
d.bark()   

Example: Multiple Inheritance

class Father:
    def skills(self):
        print("Father: gardening, driving")

class Mother:
    def skills(self):
        print("Mother: cooking, painting")

class Child(Father, Mother):
    def skills(self):
        print("Child: coding")
        Father.skills(self)
        Mother.skills(self)

c = Child()
c.skills()

2. Abstraction in Python
   Abstraction means hiding the implementation details and showing only the necessary features.

Example: Abstract Class with Abstract Method

from abc import ABC, abstractmethod

# Abstract class
class Vehicle(ABC):
    @abstractmethod
    def start_engine(self):
        pass  # No implementation here

# Subclass must implement abstract method
class Car(Vehicle):
    def start_engine(self):
        print("Car engine started")
c = Car()
c.start_engine()